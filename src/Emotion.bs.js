// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Css = require("@minima.app/re-css/src/Css.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Css$1 = require("@emotion/css");
var Js_null_undefined = require("bs-platform/lib/js/js_null_undefined.js");

var Css$2 = Css;

var Declaration = { };

function toDict(declarations) {
  return Js_dict.fromList(Belt_List.flatten(declarations));
}

var Declarations = {
  toDict: toDict
};

var Selector = { };

function p(prop, value) {
  return /* :: */[
          /* tuple */[
            prop,
            value
          ],
          /* [] */0
        ];
}

function important(v) {
  if (!v) {
    return v;
  }
  if (v[1]) {
    return v;
  }
  var match = v[0];
  return /* :: */[
          /* tuple */[
            match[0],
            match[1] + " !important"
          ],
          /* [] */0
        ];
}

function label(x) {
  return p("label", x);
}

function display(x) {
  return p("display", Css.Display.toString(x));
}

function boxSizing(x) {
  return p("boxSizing", Css.BoxSizing.toString(x));
}

function position(x) {
  return p("position", Css.Position.toString(x));
}

function top(x) {
  return p("top", Css.LengthPercentageAuto.toString(x));
}

function bottom(x) {
  return p("bottom", Css.LengthPercentageAuto.toString(x));
}

function left(x) {
  return p("left", Css.LengthPercentageAuto.toString(x));
}

function right(x) {
  return p("right", Css.LengthPercentageAuto.toString(x));
}

function width(x) {
  return p("width", Css.LengthPercentageAuto.toString(x));
}

function minWidth(x) {
  return p("minWidth", Css.LengthPercentageAuto.toString(x));
}

function maxWidth(x) {
  return p("maxWidth", Css.LengthPercentageNone.toString(x));
}

function height(x) {
  return p("height", Css.LengthPercentageAuto.toString(x));
}

function minHeight(x) {
  return p("minHeight", Css.LengthPercentageAuto.toString(x));
}

function maxHeight(x) {
  return p("maxHeight", Css.LengthPercentageNone.toString(x));
}

function margin(x) {
  return p("margin", Css.LengthPercentageAuto.toString(x));
}

function margin2(v, h) {
  return p("margin", Css.LengthPercentageAuto.toString2(v, h));
}

function margin3(t, h, b) {
  return p("margin", Css.LengthPercentageAuto.toString3(t, h, b));
}

function margin4(t, r, b, l) {
  return p("margin", Css.LengthPercentageAuto.toString4(t, r, b, l));
}

function marginLeft(x) {
  return p("marginLeft", Css.LengthPercentageAuto.toString(x));
}

function marginRight(x) {
  return p("marginRight", Css.LengthPercentageAuto.toString(x));
}

function marginTop(x) {
  return p("marginTop", Css.LengthPercentageAuto.toString(x));
}

function marginBottom(x) {
  return p("marginBottom", Css.LengthPercentageAuto.toString(x));
}

function padding(x) {
  return p("padding", Css.LengthPercentage.toString(x));
}

function padding2(v, h) {
  return p("padding", Css.LengthPercentage.toString2(v, h));
}

function padding3(t, h, b) {
  return p("padding", Css.LengthPercentage.toString3(t, h, b));
}

function padding4(t, r, b, l) {
  return p("padding", Css.LengthPercentage.toString4(t, r, b, l));
}

function paddingLeft(x) {
  return p("paddingLeft", Css.LengthPercentage.toString(x));
}

function paddingRight(x) {
  return p("paddingRight", Css.LengthPercentage.toString(x));
}

function paddingTop(x) {
  return p("paddingTop", Css.LengthPercentage.toString(x));
}

function paddingBottom(x) {
  return p("paddingBottom", Css.LengthPercentage.toString(x));
}

function border(width, style, color) {
  return p("border", Css.Border.toString(width, style, color));
}

function borderWidth(x) {
  return p("borderWidth", Css.BorderWidth.toString(x));
}

function borderStyle(x) {
  return p("borderStyle", Css.BorderStyle.toString(x));
}

function borderColor(x) {
  return p("borderColor", Css.Color.toString(x));
}

function borderLeft(width, style, color) {
  return p("borderLeft", Css.Border.toString(width, style, color));
}

function borderLeftWidth(x) {
  return p("borderLeftWidth", Css.BorderWidth.toString(x));
}

function borderLeftStyle(x) {
  return p("borderLeftStyle", Css.BorderStyle.toString(x));
}

function borderLeftColor(x) {
  return p("borderLeftColor", Css.Color.toString(x));
}

function borderRight(width, style, color) {
  return p("borderRight", Css.Border.toString(width, style, color));
}

function borderRightWidth(x) {
  return p("borderRightWidth", Css.BorderWidth.toString(x));
}

function borderRightStyle(x) {
  return p("borderRightStyle", Css.BorderStyle.toString(x));
}

function borderRightColor(x) {
  return p("borderRightColor", Css.Color.toString(x));
}

function borderTop(width, style, color) {
  return p("borderTop", Css.Border.toString(width, style, color));
}

function borderTopWidth(x) {
  return p("borderTopWidth", Css.BorderWidth.toString(x));
}

function borderTopStyle(x) {
  return p("borderTopStyle", Css.BorderStyle.toString(x));
}

function borderTopColor(x) {
  return p("borderTopColor", Css.Color.toString(x));
}

function borderBottom(width, style, color) {
  return p("borderBottom", Css.Border.toString(width, style, color));
}

function borderBottomWidth(x) {
  return p("borderBottomWidth", Css.BorderWidth.toString(x));
}

function borderBottomStyle(x) {
  return p("borderBottomStyle", Css.BorderStyle.toString(x));
}

function borderBottomColor(x) {
  return p("borderBottomColor", Css.Color.toString(x));
}

function borderRadius(x) {
  return p("borderRadius", Css.LengthPercentage.toString(x));
}

function borderTopLeftRadius(x) {
  return p("borderTopLeftRadius", Css.LengthPercentage.toString(x));
}

function borderTopRightRadius(x) {
  return p("borderTopRightRadius", Css.LengthPercentage.toString(x));
}

function borderBottomLeftRadius(x) {
  return p("borderBottomLeftRadius", Css.LengthPercentage.toString(x));
}

function borderBottomRightRadius(x) {
  return p("borderBottomRightRadius", Css.LengthPercentage.toString(x));
}

function borderCollapse(x) {
  return p("borderCollapse", Css.BorderCollapse.toString(x));
}

function borderSpacing(x) {
  return p("borderSpacing", Css.Length.toString(x));
}

function borderSpacing2(x, y) {
  return p("borderSpacing", Css.Length.toString2(x, y));
}

function backgroundAttachment(x) {
  return p("backgroundAttachment", Css.BackgroundAttachment.toString(x));
}

function backgroundAttachments(x) {
  return p("backgroundAttachment", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundAttachment.toString), ", "));
}

function backgroundBlendMode(x) {
  return p("backgroundBlendMode", Css.BackgroundBlendMode.toString(x));
}

function backgroundBlendModes(x) {
  return p("backgroundBlendMode", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundBlendMode.toString), ", "));
}

function backgroundClip(x) {
  return p("backgroundClip", Css.BackgroundBox.toString(x));
}

function backgroundColor(x) {
  return p("backgroundColor", Css.Color.toString(x));
}

function backgroundImage(x) {
  return p("backgroundImage", Css.BackgroundImage.toString(x));
}

function backgroundImages(x) {
  return p("backgroundImage", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundImage.toString), ", "));
}

function backgroundOrigin(x) {
  return p("backgroundOrigin", Css.BackgroundBox.toString(x));
}

function backgroundPosition(x) {
  return p("backgroundPosition", Css.BackgroundPosition.toString(x));
}

function backgroundPositions(x) {
  return p("backgroundPosition", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundPosition.toString), ", "));
}

function backgroundRepeat(x) {
  return p("backgroundRepeat", Css.BackgroundRepeat.toString(x));
}

function backgroundRepeat2(x) {
  return p("backgroundRepeat", (function (param) {
                return Css.BackgroundRepeat.toString2(x, param);
              }));
}

function backgroundSize(x) {
  return p("backgroundSize", Css.BackgroundSize.toString(x));
}

function backgroundSizes(x) {
  return p("backgroundSize", Css.Helpers.joinWith(Belt_List.map(x, Css.BackgroundSize.toString), ", "));
}

function boxShadow(xOpt, yOpt, blurOpt, spreadOpt, insetOpt, color) {
  var x = xOpt !== undefined ? xOpt : /* zero */-789508312;
  var y = yOpt !== undefined ? yOpt : /* zero */-789508312;
  var blur = blurOpt !== undefined ? blurOpt : /* zero */-789508312;
  var spread = spreadOpt !== undefined ? spreadOpt : /* zero */-789508312;
  var inset = insetOpt !== undefined ? insetOpt : false;
  return p("boxShadow", Css.BoxShadow.toString(x, y, blur, spread, inset, color));
}

function boxShadows(x) {
  return p("boxShadow", Css.Helpers.joinWith(Belt_List.mapU(x, (function (param) {
                        return Css.BoxShadow.toString(param[0], param[1], param[2], param[3], param[5], param[4]);
                      })), ", "));
}

function clipPath(x) {
  return p("clipPath", Css.ClipPath.toString(x));
}

function visibility(x) {
  return p("visibility", Css.Visibility.toString(x));
}

function backfaceVisibility(x) {
  return p("backfaceVisibility", Css.Visibility.toString(x));
}

function color(x) {
  return p("color", Css.Color.toString(x));
}

function fontFamily(x) {
  return p("fontFamily", x);
}

function fontSize(x) {
  return p("fontSize", Css.LengthPercentage.toString(x));
}

function fontWeight(x) {
  return p("fontWeight", "" + (String(x) + ""));
}

function fontStyle(x) {
  return p("fontStyle", Css.FontStyle.toString(x));
}

function fontVariant(x) {
  return p("fontVariant", Css.FontVariant.toString(x));
}

function fontKerning(x) {
  return p("fontKerning", Css.FontKerning.toString(x));
}

function fontStretch(x) {
  return p("fontStretch", Css.FontStretch.toString(x));
}

function src(srcs) {
  return p("src", Css.Helpers.joinWith(Belt_List.map(srcs, (function (param) {
                        return Css.FontSrc.toString(param[1], param[0]);
                      })), ", "));
}

function lineHeight(x) {
  return p("lineHeight", Css.LineHeight.toString(x));
}

function letterSpacing(x) {
  return p("letterSpacing", Css.LetterSpacing.toString(x));
}

function hyphens(x) {
  return p("hyphens", Css.Hyphens.toString(x));
}

function textAlign(x) {
  return p("textAlign", Css.TextAlign.toString(x));
}

function textDecoration(x) {
  return p("textDecoration", Css.TextDecorationLine.toString(x));
}

function textDecorationColor(x) {
  return p("textDecorationColor", Css.Color.toString(x));
}

function textDecorationStyle(x) {
  return p("textDecorationStyle", Css.TextDecorationStyle.toString(x));
}

function textIndent(x) {
  return p("textIndent", Css.LengthPercentage.toString(x));
}

function textOverflow(x) {
  return p("textOverflow", Css.TextOverflow.toString(x));
}

function textTransform(x) {
  return p("textTransform", Css.TextTransform.toString(x));
}

function textShadow(xOpt, yOpt, blurOpt, color) {
  var x = xOpt !== undefined ? xOpt : /* zero */-789508312;
  var y = yOpt !== undefined ? yOpt : /* zero */-789508312;
  var blur = blurOpt !== undefined ? blurOpt : /* zero */-789508312;
  return p("textShadow", Css.TextShadow.toString(x, y, blur, color));
}

function textShadows(xs) {
  return p("textShadow", Css.Helpers.joinWith(Belt_List.mapU(xs, (function (param) {
                        return Css.TextShadow.toString(param[0], param[1], param[2], param[3]);
                      })), ", "));
}

function $$float(x) {
  return p("float", Css.Float.toString(x));
}

function clear(x) {
  return p("clear", Css.Clear.toString(x));
}

function overflow(x) {
  return p("overflow", Css.Overflow.toString(x));
}

function overflowX(x) {
  return p("overflow-x", Css.Overflow.toString(x));
}

function overflowY(x) {
  return p("overflow-y", Css.Overflow.toString(x));
}

function overflowWrap(x) {
  return p("overflow-wrap", Css.WordWrap.toString(x));
}

function whiteSpace(x) {
  return p("whiteSpace", Css.WhiteSpace.toString(x));
}

function userSelect(x) {
  return p("userSelect", Css.UserSelect.toString(x));
}

function verticalAlign(x) {
  return p("verticalAlign", Css.VerticalAlign.toString(x));
}

function wordBreak(x) {
  return p("wordBreak", Css.WordBreak.toString(x));
}

function wordSpacing(x) {
  return p("wordSpacing", Css.WordSpacing.toString(x));
}

function wordWrap(x) {
  return p("wordWrap", Css.WordWrap.toString(x));
}

function direction(x) {
  return p("direction", Css.Direction.toString(x));
}

function listStyle(style, position, image) {
  return p("listStyle", Css.ListStyle.toString(style, position, image));
}

function listStyleType(x) {
  return p("listStyleType", Css.ListStyleType.toString(x));
}

function listStylePosition(x) {
  return p("listStylePosition", Css.ListStylePosition.toString(x));
}

function listStyleImage(x) {
  return p("listStyleImage", Css.ListStyleImage.toString(x));
}

function opacity(x) {
  return p("opacity", "" + (String(x) + ""));
}

function cursor(x) {
  return p("cursor", Css.Cursor.toString(x));
}

function pointerEvents(x) {
  return p("pointerEvents", Css.PointerEvents.toString(x));
}

function outline(size, style, color) {
  return p("outline", Css.Outline.toString(size, style, color));
}

function outlineStyle(x) {
  return p("outlineStyle", Css.OutlineStyle.toString(x));
}

function outlineWidth(x) {
  return p("outlineWidth", Css.Length.toString(x));
}

function outlineColor(x) {
  return p("outlineColor", Css.Color.toString(x));
}

function outlineOffset(x) {
  return p("outlineOffset", Css.Length.toString(x));
}

function tableLayout(x) {
  return p("tableLayout", Css.TableLayout.toString(x));
}

function transition(property, duration, timingFunction, delay) {
  return p("transition", Css.Transition.toString(property, duration, delay, timingFunction));
}

function transitions(xs) {
  return p("transition", Css.Helpers.joinWith(Belt_List.map(xs, (function (param) {
                        return Css.Transition.toString(param[0], param[1], param[3], param[2]);
                      })), ", "));
}

function transitionProperty(x) {
  return p("transitionProperty", x);
}

function transitionDuration(x) {
  return p("transitionDuration", Css.Timing.toString(x));
}

function transitionDelay(x) {
  return p("transitionDelay", Css.Timing.toString(x));
}

function transitionTimingFunction(x) {
  return p("transitionTimingFunction", Css.TimingFunction.toString(x));
}

function transform(x) {
  return p("transform", Css.Transform.toString(x));
}

function transforms(xs) {
  return p("transform", Css.Helpers.joinWith(Belt_List.map(xs, Css.Transform.toString), " "));
}

function transformOrigin(x, y) {
  return p("transformOrigin", Css.LengthPercentage.toString2(x, y));
}

function transformOrigin3d(x, y, z) {
  return p("transformOrigin", Css.LengthPercentage.toString3(x, y, z));
}

function transformStyle(x) {
  return p("transformStyle", Css.TransformStyle.toString(x));
}

function perspective(x) {
  return p("perspective", Css.Perspective.toString(x));
}

function perspectiveOrigin(x, y) {
  return p("perspectiveOrigin", Css.LengthPercentage.toString2(x, y));
}

function fill(x) {
  return p("fill", Css.Color.toString(x));
}

function fillOpacity(x) {
  return p("fillOpacity", "" + (String(x) + ""));
}

function fillRule(x) {
  return p("fillRule", Css.FillRule.toString(x));
}

function stroke(x) {
  return p("stroke", Css.Color.toString(x));
}

function strokeWidth(x) {
  return p("strokeWidth", Css.LengthPercentage.toString(x));
}

function strokeOpacity(x) {
  return p("strokeOpacity", "" + (String(x) + ""));
}

function strokeMiterlimit(x) {
  return p("strokeMiterlimit", "" + (String(x) + ""));
}

function strokeLinecap(x) {
  return p("strokeLinecap", Css.StrokeLinecap.toString(x));
}

function strokeLinejoin(x) {
  return p("strokeLinejoin", Css.StrokeLinejoin.toString(x));
}

function stopColor(x) {
  return p("stopColor", Css.Color.toString(x));
}

function stopOpacity(x) {
  return p("stopOpacity", "" + (String(x) + ""));
}

function animation(name, duration, delay, direction, timingFunction, fillMode, playState, iterationCount) {
  return p("animation", Css.Animation.toString(name, duration, delay, direction, timingFunction, fillMode, playState, iterationCount));
}

function animations(xs) {
  return p("animation", Css.Helpers.joinWith(Belt_List.mapU(xs, (function (param) {
                        return Css.Animation.toString(param[0], param[1], param[2], param[3], param[4], param[5], param[6], param[7]);
                      })), ", "));
}

function animationDelay(x) {
  return p("animationDelay", Css.Timing.toString(x));
}

function animationDelays(x) {
  return p("animationDelay", Css.Helpers.joinWith(Belt_List.map(x, Css.Timing.toString), ", "));
}

function animationDirection(x) {
  return p("animationDirection", Css.AnimationDirection.toString(x));
}

function animationDirections(x) {
  return p("animationDirection", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationDirection.toString), ", "));
}

function animationDuration(x) {
  return p("animationDuration", Css.Timing.toString(x));
}

function animationDurations(x) {
  return p("animationDuration", Css.Helpers.joinWith(Belt_List.map(x, Css.Timing.toString), ", "));
}

function animationFillMode(x) {
  return p("animationFillMode", Css.AnimationFillMode.toString(x));
}

function animationFillModes(x) {
  return p("animationFillMode", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationFillMode.toString), ", "));
}

function animationIterationCount(x) {
  return p("animationIterationCount", Css.AnimationIterationCount.toString(x));
}

function animationIterationCounts(x) {
  return p("animationIterationCount", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationIterationCount.toString), ", "));
}

function animationName(x) {
  return p("animationName", x);
}

function animationNames(x) {
  return p("animationName", Css.Helpers.joinWith(x, ", "));
}

function animationPlayState(x) {
  return p("animationPlayState", Css.AnimationPlayState.toString(x));
}

function animationPlayStates(x) {
  return p("animationPlayState", Css.Helpers.joinWith(Belt_List.map(x, Css.AnimationPlayState.toString), ", "));
}

function animationTimingFunction(x) {
  return p("animationTimingFunction", Css.TimingFunction.toString(x));
}

function animationTimingFunctions(x) {
  return p("animationTimingFunction", Css.Helpers.joinWith(Belt_List.map(x, Css.TimingFunction.toString), ", "));
}

function filter(x) {
  return p("filter", Css.Filter.toString(x));
}

function filters(x) {
  return p("filter", Css.Helpers.joinWith(Belt_List.map(x, Css.Filter.toString), " "));
}

function appearance(x) {
  return p("appearance", Css.Appearance.toString(x));
}

function flex(x) {
  return p("flex", Curry._1(Css.Flex.Flex.toString, x));
}

function flexGrow(x) {
  return p("flexGrow", "" + (String(x) + ""));
}

function flexShrink(x) {
  return p("flexShrink", "" + (String(x) + ""));
}

function flexBasis(x) {
  return p("flexBasis", Css.LengthPercentageAuto.toString(x));
}

function flexDirection(x) {
  return p("flexDirection", Curry._1(Css.Flex.Direction.toString, x));
}

function flexWrap(x) {
  return p("flexWrap", Curry._1(Css.Flex.Wrap.toString, x));
}

function flexFlow(direction, wrap) {
  return p("flex-flow", Curry._2(Css.Flex.Flow.toString, direction, wrap));
}

function order(x) {
  return p("order", "" + (String(x) + ""));
}

function gridTemplateRows(x) {
  return p("gridTemplateRows", Curry._1(Css.Grid.Template.toString, x));
}

function gridTemplateColumns(x) {
  return p("gridTemplateColumns", Curry._1(Css.Grid.Template.toString, x));
}

function gridAutoRows(x) {
  return p("gridAutoRows", Curry._1(Css.Grid.AutoRows.toString, x));
}

function gridAutoColumns(x) {
  return p("gridAutoColumns", Curry._1(Css.Grid.AutoColumns.toString, x));
}

function gridRowStart(x) {
  return p("gridRowStart", Curry._1(Css.Grid.Line.toString, x));
}

function gridRowEnd(x) {
  return p("gridRowEnd", Curry._1(Css.Grid.Line.toString, x));
}

function gridColumnStart(x) {
  return p("gridColumnStart", Curry._1(Css.Grid.Line.toString, x));
}

function gridColumnEnd(x) {
  return p("gridColumnEnd", Curry._1(Css.Grid.Line.toString, x));
}

function gridGap(x) {
  return p("gridGap", Css.LengthPercentage.toString(x));
}

function gridGaps(x, y) {
  return p("gridGap", Css.LengthPercentage.toString2(x, y));
}

function gridRowGap(x) {
  return p("gridRowGap", Curry._1(Css.Grid.Gap.toString, x));
}

function gridColumnGap(x) {
  return p("gridColumnGap", Curry._1(Css.Grid.Gap.toString, x));
}

function gridArea(x) {
  return p("gridArea", x);
}

function gridTemplateAreas(x) {
  return p("gridTemplateAreas", Curry._1(Css.Grid.TemplateAreas.toString, x));
}

function gridAutoFlow(x) {
  return p("gridAutoFlow", Curry._1(Css.Grid.AutoFlow.toString, x));
}

function alignSelf(x) {
  return p("alignSelf", Css.AlignSelf.toString(x));
}

function alignItems(x) {
  return p("alignItems", Css.AlignItems.toString(x));
}

function alignContent(x) {
  return p("alignContent", Css.AlignContent.toString(x));
}

function justifySelf(x) {
  return p("justifySelf", Css.JustifySelf.toString(x));
}

function justifyItems(x) {
  return p("justifyItems", Css.JustifyItems.toString(x));
}

function justifyContent(x) {
  return p("justifyContent", Css.JustifyContent.toString(x));
}

function zIndex(x) {
  return p("zIndex", "" + (String(x) + ""));
}

function content(x) {
  return p("content", "\"" + (String(x) + "\""));
}

function select(selector, declarations) {
  return /* :: */[
          /* tuple */[
            selector,
            Js_dict.fromList(Belt_List.flatten(declarations))
          ],
          /* [] */0
        ];
}

function active(param) {
  return select(":active", param);
}

function after(param) {
  return select("::after", param);
}

function before(param) {
  return select("::before", param);
}

function checked(param) {
  return select(":checked", param);
}

function disabled(param) {
  return select(":disabled", param);
}

function firstChild(param) {
  return select(":first-child", param);
}

function firstOfType(param) {
  return select(":first-of-type", param);
}

function focus(param) {
  return select(":focus", param);
}

function hover(param) {
  return select(":hover", param);
}

function lastChild(param) {
  return select(":last-child", param);
}

function lastOfType(param) {
  return select(":last-of-type", param);
}

function link(param) {
  return select(":link", param);
}

function readOnly(param) {
  return select(":read-only", param);
}

function required(param) {
  return select(":required", param);
}

function visited(param) {
  return select(":visited", param);
}

function enabled(param) {
  return select(":enabled", param);
}

function noContent(param) {
  return select(":empty", param);
}

function $$default(param) {
  return select(":default", param);
}

function anyLink(param) {
  return select(":any-link", param);
}

function onlyChild(param) {
  return select(":only-child", param);
}

function onlyOfType(param) {
  return select(":only-of-type", param);
}

function optional(param) {
  return select(":optional", param);
}

function invalid(param) {
  return select(":invalid", param);
}

function outOfRange(param) {
  return select(":out-of-range", param);
}

function target(param) {
  return select(":target", param);
}

function firstLine(param) {
  return select("::first-line", param);
}

function firstLetter(param) {
  return select("::first-letter", param);
}

function selection(param) {
  return select("::selection", param);
}

function placeholder(param) {
  return select("::placeholder", param);
}

function not__(selector, declarations) {
  return select(":not(" + (String(selector) + ")"), declarations);
}

function nthChild(selector, declarations) {
  return select(":nth-child(" + (String(selector) + ")"), declarations);
}

function nthLastChild(selector, declarations) {
  return select(":nth-last-child(" + (String(selector) + ")"), declarations);
}

function nthOfType(selector, declarations) {
  return select(":nth-of-type(" + (String(selector) + ")"), declarations);
}

function nthLastOfType(selector, declarations) {
  return select(":nth-last-of-type(" + (String(selector) + ")"), declarations);
}

function media(query, declarations) {
  return select("@media " + (String(query) + ""), declarations);
}

function supports(query, declarations) {
  return select("@supports " + (String(query) + ""), declarations);
}

function em(x) {
  return /* `em */[
          22632,
          x
        ];
}

function ex(x) {
  return /* `ex */[
          22643,
          x
        ];
}

function ch(x) {
  return /* `ch */[
          22181,
          x
        ];
}

function rem(x) {
  return /* `rem */[
          5691738,
          x
        ];
}

function vw(x) {
  return /* `vw */[
          26433,
          x
        ];
}

function vh(x) {
  return /* `vh */[
          26418,
          x
        ];
}

function vmin(x) {
  return /* `vmin */[
          -833470756,
          x
        ];
}

function vmax(x) {
  return /* `vmax */[
          -833472530,
          x
        ];
}

function cm(x) {
  return /* `cm */[
          22186,
          x
        ];
}

function mm(x) {
  return /* `mm */[
          24416,
          x
        ];
}

function q(x) {
  return /* `q */[
          113,
          x
        ];
}

function inch(x) {
  return /* `inch */[
          -977586742,
          x
        ];
}

function pc(x) {
  return /* `pc */[
          25075,
          x
        ];
}

function pt(x) {
  return /* `pt */[
          25092,
          x
        ];
}

function px(x) {
  return /* `px */[
          25096,
          x
        ];
}

function pct(x) {
  return /* `pct */[
          5591841,
          x
        ];
}

function fr(x) {
  return /* `fr */[
          22860,
          x
        ];
}

function n(x) {
  return /* `n */[
          110,
          x
        ];
}

function i(x) {
  return /* `i */[
          105,
          x
        ];
}

function f(x) {
  return /* `f */[
          102,
          x
        ];
}

function deg(x) {
  return /* `deg */[
          4995526,
          x
        ];
}

function rad(x) {
  return /* `rad */[
          5690837,
          x
        ];
}

function grad(x) {
  return /* `grad */[
          -999567410,
          x
        ];
}

function turn(x) {
  return /* `turn */[
          -855250051,
          x
        ];
}

function rgb(r, g, b) {
  return /* `rgb */[
          5692173,
          /* tuple */[
            r,
            g,
            b
          ]
        ];
}

function rgba(r, g, b, a) {
  return /* `rgba */[
          -878128972,
          /* tuple */[
            r,
            g,
            b,
            a
          ]
        ];
}

function hsl(h, s, l) {
  return /* `hsl */[
          5197569,
          /* tuple */[
            h,
            s,
            l
          ]
        ];
}

function hsla(h, s, l, a) {
  return /* `hsla */[
          -988425664,
          /* tuple */[
            h,
            s,
            l,
            a
          ]
        ];
}

function hex(x) {
  return /* `hex */[
          5194459,
          x
        ];
}

function linearGradient(a, s) {
  return /* `linearGradient */[
          616379637,
          /* tuple */[
            a,
            s
          ]
        ];
}

function repeatingLinearGradient(a, s) {
  return /* `repeatingLinearGradient */[
          -160280644,
          /* tuple */[
            a,
            s
          ]
        ];
}

function radialGradient(s) {
  return /* `radialGradient */[
          119548911,
          s
        ];
}

function repeatingRadialGradient(s) {
  return /* `repeatingRadialGradient */[
          -657111370,
          s
        ];
}

function s(x) {
  return /* `s */[
          115,
          x
        ];
}

function ms(x) {
  return /* `ms */[
          24422,
          x
        ];
}

function steps(i, se) {
  return /* `steps */[
          68058023,
          /* tuple */[
            i,
            se
          ]
        ];
}

function cubicBezier(a, b, c, d) {
  return /* `cubicBezier */[
          -554785527,
          /* tuple */[
            a,
            b,
            c,
            d
          ]
        ];
}

function translate(x, y) {
  return /* `translate */[
          -914368690,
          /* tuple */[
            x,
            y
          ]
        ];
}

function translate3d(x, y, z) {
  return /* `translate3d */[
          178189215,
          /* tuple */[
            x,
            y,
            z
          ]
        ];
}

function translateX(x) {
  return /* `translateX */[
          106728778,
          x
        ];
}

function translateY(y) {
  return /* `translateY */[
          106728779,
          y
        ];
}

function translateZ(z) {
  return /* `translateZ */[
          106728780,
          z
        ];
}

function scale(x) {
  return /* `scale */[
          -120664438,
          x
        ];
}

function scaleXY(x, y) {
  return /* `scaleXY */[
          -452505077,
          /* tuple */[
            x,
            y
          ]
        ];
}

function scaleX(x) {
  return /* `scaleX */[
          1009117838,
          x
        ];
}

function scaleY(y) {
  return /* `scaleY */[
          1009117839,
          y
        ];
}

function scaleZ(z) {
  return /* `scaleZ */[
          1009117840,
          z
        ];
}

function scale3d(x, y, z) {
  return /* `scale3d */[
          -452513317,
          /* tuple */[
            x,
            y,
            z
          ]
        ];
}

function rotate(a) {
  return /* `rotate */[
          -887077285,
          a
        ];
}

function rotate3d(x, y, z, a) {
  return /* `rotate3d */[
          142802924,
          /* tuple */[
            x,
            y,
            z,
            a
          ]
        ];
}

function rotateX(x) {
  return /* `rotateX */[
          -249738851,
          x
        ];
}

function rotateY(z) {
  return /* `rotateY */[
          -249738850,
          z
        ];
}

function rotateZ(z) {
  return /* `rotateZ */[
          -249738849,
          z
        ];
}

function skew(x, y) {
  return /* `skew */[
          -866839798,
          /* tuple */[
            x,
            y
          ]
        ];
}

function skewX(x) {
  return /* `skewX */[
          -31746546,
          x
        ];
}

function skewY(y) {
  return /* `skewY */[
          -31746545,
          y
        ];
}

function matrix(a, b, c, d, e, f) {
  return /* `matrix */[
          1002976833,
          /* tuple */[
            a,
            b,
            c,
            d,
            e,
            f
          ]
        ];
}

function matrix3d(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  return /* `matrix3d */[
          -420268718,
          /* tuple */[
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p
          ]
        ];
}

function minmax(min, max) {
  return /* `minmax */[
          -754859950,
          /* tuple */[
            min,
            max
          ]
        ];
}

function fitContent(x) {
  return /* `fitContent */[
          -195805336,
          x
        ];
}

function repeat(value, trackList) {
  return /* `repeat */[
          108828507,
          /* tuple */[
            value,
            trackList
          ]
        ];
}

function list(xs) {
  return /* `list */[
          -944563106,
          xs
        ];
}

function ident(x) {
  return /* `ident */[
          930693872,
          x
        ];
}

function nIdent(n, ident) {
  return /* `nIdent */[
          -974625886,
          /* tuple */[
            n,
            ident
          ]
        ];
}

function span(x) {
  return /* `span */[
          -866592054,
          x
        ];
}

function areas(xs) {
  return /* `areas */[
          629510214,
          xs
        ];
}

function css(extend, declarations) {
  var __x = Js_dict.fromList(Belt_List.flatten(declarations));
  return Css$1.css(Js_null_undefined.fromOption(extend), __x);
}

function $$global(selector, declarations) {
  var css = { };
  css[selector] = Js_dict.fromList(Belt_List.flatten(declarations));
  Css$1.injectGlobal(css);
  
}

function keyframes(frames) {
  return Css$1.keyframes(Belt_List.reduce(frames, { }, (function (acc, item) {
                    var stop = item[0];
                    acc["" + (String(stop) + "%")] = Js_dict.fromList(Belt_List.flatten(item[1]));
                    return acc;
                  })));
}

function fontFace(declarations) {
  return $$global("@font-face", declarations);
}

function page(selectors, declarations) {
  if (selectors !== undefined) {
    return $$global("@page " + selectors, declarations);
  } else {
    return $$global("@page", declarations);
  }
}

var Calc;

var unsafe = p;

var auto = /* auto */-1065951377;

var zero = /* zero */-789508312;

var none = /* none */-922086728;

var transparent = /* transparent */582626130;

var currentColor = /* currentColor */292050538;

var inline = /* inline */423610969;

var listItem = /* listItem */632591505;

var block = /* block */888960333;

var inlineBlock = /* inlineBlock */-147785676;

var flexBox = /* flex */-1010954439;

var inlineFlex = /* inlineFlex */53323314;

var grid = /* grid */-999565626;

var inlineGrid = /* inlineGrid */64712127;

var table = /* table */182695950;

var inlineTable = /* inlineTable */-854050059;

var tableRowGroup = /* tableRowGroup */-836725517;

var tableHeaderGroup = /* tableHeaderGroup */606419204;

var tableFooterGroup = /* tableFooterGroup */-1045696202;

var tableRow = /* tableRow */-843129172;

var tableColumnGroup = /* tableColumnGroup */850209563;

var tableColumn = /* tableColumn */97122692;

var tableCell = /* tableCell */793912528;

var tableCaption = /* tableCaption */1054826616;

var absolute = /* absolute */-1013592457;

var $$static = /* static */100392110;

var fixed = /* fixed */10615156;

var relative = /* relative */903134412;

var sticky = /* sticky */188263721;

var hidden = /* hidden */-862584982;

var dotted = /* dotted */841979626;

var dashed = /* dashed */568403505;

var solid = /* solid */12956715;

var $$double = /* double */852175633;

var groove = /* groove */472095738;

var ridge = /* ridge */-379468757;

var inset = /* inset */1042283741;

var outset = /* outset */209930196;

var thin = /* thin */-855898535;

var medium = /* medium */-20425611;

var thick = /* thick */260669021;

var linear = /* linear */-325037595;

var ease = /* ease */-1022587922;

var easeIn = /* easeIn */138027891;

var easeOut = /* easeOut */715748672;

var easeInOut = /* easeInOut */-960651557;

var stepStart = /* stepStart */-193525386;

var stepEnd = /* stepEnd */20933615;

var row = /* row */5693978;

var column = /* column */-963948842;

var rowReverse = /* rowReverse */378951208;

var columnReverse = /* columnReverse */135477484;

var nowrap = /* nowrap */867913355;

var wrap = /* wrap */-822134326;

var wrapReverse = /* wrapReverse */-463121288;

var normal = /* normal */812216871;

var flexStart = /* flexStart */662439529;

var flexEnd = /* flexEnd */924268066;

var center = /* center */98248149;

var baseline = /* baseline */287825029;

var stretch = /* stretch */-162316795;

var selfStart = /* selfStart */1040645430;

var selfEnd = /* selfEnd */51834799;

var spaceAround = /* spaceAround */-485895757;

var spaceBetween = /* spaceBetween */516682146;

var minContent = /* minContent */-550577721;

var maxContent = /* maxContent */60557045;

var autoFill = /* autoFill */652328338;

var autoFit = /* autoFit */494053794;

var gridStart = /* gridStart */-120668228;

var gridEnd = /* gridEnd */120775861;

var firstBaseline = /* firstBaseline */116572373;

var lastBaseline = /* lastBaseline */-222697221;

var spaceEvenly = /* spaceEvenly */-1016061555;

var rowDense = /* rowDense */-15525083;

var columnDense = /* columnDense */-227605271;

exports.Css = Css$2;
exports.Calc = Calc;
exports.Declaration = Declaration;
exports.Declarations = Declarations;
exports.Selector = Selector;
exports.p = p;
exports.important = important;
exports.label = label;
exports.display = display;
exports.boxSizing = boxSizing;
exports.position = position;
exports.top = top;
exports.bottom = bottom;
exports.left = left;
exports.right = right;
exports.width = width;
exports.minWidth = minWidth;
exports.maxWidth = maxWidth;
exports.height = height;
exports.minHeight = minHeight;
exports.maxHeight = maxHeight;
exports.margin = margin;
exports.margin2 = margin2;
exports.margin3 = margin3;
exports.margin4 = margin4;
exports.marginLeft = marginLeft;
exports.marginRight = marginRight;
exports.marginTop = marginTop;
exports.marginBottom = marginBottom;
exports.padding = padding;
exports.padding2 = padding2;
exports.padding3 = padding3;
exports.padding4 = padding4;
exports.paddingLeft = paddingLeft;
exports.paddingRight = paddingRight;
exports.paddingTop = paddingTop;
exports.paddingBottom = paddingBottom;
exports.border = border;
exports.borderWidth = borderWidth;
exports.borderStyle = borderStyle;
exports.borderColor = borderColor;
exports.borderLeft = borderLeft;
exports.borderLeftWidth = borderLeftWidth;
exports.borderLeftStyle = borderLeftStyle;
exports.borderLeftColor = borderLeftColor;
exports.borderRight = borderRight;
exports.borderRightWidth = borderRightWidth;
exports.borderRightStyle = borderRightStyle;
exports.borderRightColor = borderRightColor;
exports.borderTop = borderTop;
exports.borderTopWidth = borderTopWidth;
exports.borderTopStyle = borderTopStyle;
exports.borderTopColor = borderTopColor;
exports.borderBottom = borderBottom;
exports.borderBottomWidth = borderBottomWidth;
exports.borderBottomStyle = borderBottomStyle;
exports.borderBottomColor = borderBottomColor;
exports.borderRadius = borderRadius;
exports.borderTopLeftRadius = borderTopLeftRadius;
exports.borderTopRightRadius = borderTopRightRadius;
exports.borderBottomLeftRadius = borderBottomLeftRadius;
exports.borderBottomRightRadius = borderBottomRightRadius;
exports.borderCollapse = borderCollapse;
exports.borderSpacing = borderSpacing;
exports.borderSpacing2 = borderSpacing2;
exports.backgroundAttachment = backgroundAttachment;
exports.backgroundAttachments = backgroundAttachments;
exports.backgroundBlendMode = backgroundBlendMode;
exports.backgroundBlendModes = backgroundBlendModes;
exports.backgroundClip = backgroundClip;
exports.backgroundColor = backgroundColor;
exports.backgroundImage = backgroundImage;
exports.backgroundImages = backgroundImages;
exports.backgroundOrigin = backgroundOrigin;
exports.backgroundPosition = backgroundPosition;
exports.backgroundPositions = backgroundPositions;
exports.backgroundRepeat = backgroundRepeat;
exports.backgroundRepeat2 = backgroundRepeat2;
exports.backgroundSize = backgroundSize;
exports.backgroundSizes = backgroundSizes;
exports.boxShadow = boxShadow;
exports.boxShadows = boxShadows;
exports.clipPath = clipPath;
exports.visibility = visibility;
exports.backfaceVisibility = backfaceVisibility;
exports.color = color;
exports.fontFamily = fontFamily;
exports.fontSize = fontSize;
exports.fontWeight = fontWeight;
exports.fontStyle = fontStyle;
exports.fontVariant = fontVariant;
exports.fontKerning = fontKerning;
exports.fontStretch = fontStretch;
exports.src = src;
exports.lineHeight = lineHeight;
exports.letterSpacing = letterSpacing;
exports.hyphens = hyphens;
exports.textAlign = textAlign;
exports.textDecoration = textDecoration;
exports.textDecorationColor = textDecorationColor;
exports.textDecorationStyle = textDecorationStyle;
exports.textIndent = textIndent;
exports.textOverflow = textOverflow;
exports.textTransform = textTransform;
exports.textShadow = textShadow;
exports.textShadows = textShadows;
exports.$$float = $$float;
exports.clear = clear;
exports.overflow = overflow;
exports.overflowX = overflowX;
exports.overflowY = overflowY;
exports.overflowWrap = overflowWrap;
exports.whiteSpace = whiteSpace;
exports.userSelect = userSelect;
exports.verticalAlign = verticalAlign;
exports.wordBreak = wordBreak;
exports.wordSpacing = wordSpacing;
exports.wordWrap = wordWrap;
exports.direction = direction;
exports.listStyle = listStyle;
exports.listStyleType = listStyleType;
exports.listStylePosition = listStylePosition;
exports.listStyleImage = listStyleImage;
exports.opacity = opacity;
exports.cursor = cursor;
exports.pointerEvents = pointerEvents;
exports.outline = outline;
exports.outlineStyle = outlineStyle;
exports.outlineWidth = outlineWidth;
exports.outlineColor = outlineColor;
exports.outlineOffset = outlineOffset;
exports.tableLayout = tableLayout;
exports.transition = transition;
exports.transitions = transitions;
exports.transitionProperty = transitionProperty;
exports.transitionDuration = transitionDuration;
exports.transitionDelay = transitionDelay;
exports.transitionTimingFunction = transitionTimingFunction;
exports.transform = transform;
exports.transforms = transforms;
exports.transformOrigin = transformOrigin;
exports.transformOrigin3d = transformOrigin3d;
exports.transformStyle = transformStyle;
exports.perspective = perspective;
exports.perspectiveOrigin = perspectiveOrigin;
exports.fill = fill;
exports.fillOpacity = fillOpacity;
exports.fillRule = fillRule;
exports.stroke = stroke;
exports.strokeWidth = strokeWidth;
exports.strokeOpacity = strokeOpacity;
exports.strokeMiterlimit = strokeMiterlimit;
exports.strokeLinecap = strokeLinecap;
exports.strokeLinejoin = strokeLinejoin;
exports.stopColor = stopColor;
exports.stopOpacity = stopOpacity;
exports.animation = animation;
exports.animations = animations;
exports.animationDelay = animationDelay;
exports.animationDelays = animationDelays;
exports.animationDirection = animationDirection;
exports.animationDirections = animationDirections;
exports.animationDuration = animationDuration;
exports.animationDurations = animationDurations;
exports.animationFillMode = animationFillMode;
exports.animationFillModes = animationFillModes;
exports.animationIterationCount = animationIterationCount;
exports.animationIterationCounts = animationIterationCounts;
exports.animationName = animationName;
exports.animationNames = animationNames;
exports.animationPlayState = animationPlayState;
exports.animationPlayStates = animationPlayStates;
exports.animationTimingFunction = animationTimingFunction;
exports.animationTimingFunctions = animationTimingFunctions;
exports.filter = filter;
exports.filters = filters;
exports.appearance = appearance;
exports.flex = flex;
exports.flexGrow = flexGrow;
exports.flexShrink = flexShrink;
exports.flexBasis = flexBasis;
exports.flexDirection = flexDirection;
exports.flexWrap = flexWrap;
exports.flexFlow = flexFlow;
exports.order = order;
exports.gridTemplateRows = gridTemplateRows;
exports.gridTemplateColumns = gridTemplateColumns;
exports.gridAutoRows = gridAutoRows;
exports.gridAutoColumns = gridAutoColumns;
exports.gridRowStart = gridRowStart;
exports.gridRowEnd = gridRowEnd;
exports.gridColumnStart = gridColumnStart;
exports.gridColumnEnd = gridColumnEnd;
exports.gridGap = gridGap;
exports.gridGaps = gridGaps;
exports.gridRowGap = gridRowGap;
exports.gridColumnGap = gridColumnGap;
exports.gridArea = gridArea;
exports.gridTemplateAreas = gridTemplateAreas;
exports.gridAutoFlow = gridAutoFlow;
exports.alignSelf = alignSelf;
exports.alignItems = alignItems;
exports.alignContent = alignContent;
exports.justifySelf = justifySelf;
exports.justifyItems = justifyItems;
exports.justifyContent = justifyContent;
exports.zIndex = zIndex;
exports.content = content;
exports.unsafe = unsafe;
exports.select = select;
exports.active = active;
exports.after = after;
exports.before = before;
exports.checked = checked;
exports.disabled = disabled;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.focus = focus;
exports.hover = hover;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.link = link;
exports.readOnly = readOnly;
exports.required = required;
exports.visited = visited;
exports.enabled = enabled;
exports.noContent = noContent;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.anyLink = anyLink;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.invalid = invalid;
exports.outOfRange = outOfRange;
exports.target = target;
exports.firstLine = firstLine;
exports.firstLetter = firstLetter;
exports.selection = selection;
exports.placeholder = placeholder;
exports.not__ = not__;
exports.nthChild = nthChild;
exports.nthLastChild = nthLastChild;
exports.nthOfType = nthOfType;
exports.nthLastOfType = nthLastOfType;
exports.media = media;
exports.supports = supports;
exports.auto = auto;
exports.zero = zero;
exports.none = none;
exports.em = em;
exports.ex = ex;
exports.ch = ch;
exports.rem = rem;
exports.vw = vw;
exports.vh = vh;
exports.vmin = vmin;
exports.vmax = vmax;
exports.cm = cm;
exports.mm = mm;
exports.q = q;
exports.inch = inch;
exports.pc = pc;
exports.pt = pt;
exports.px = px;
exports.pct = pct;
exports.fr = fr;
exports.n = n;
exports.i = i;
exports.f = f;
exports.deg = deg;
exports.rad = rad;
exports.grad = grad;
exports.turn = turn;
exports.rgb = rgb;
exports.rgba = rgba;
exports.hsl = hsl;
exports.hsla = hsla;
exports.hex = hex;
exports.transparent = transparent;
exports.currentColor = currentColor;
exports.linearGradient = linearGradient;
exports.repeatingLinearGradient = repeatingLinearGradient;
exports.radialGradient = radialGradient;
exports.repeatingRadialGradient = repeatingRadialGradient;
exports.inline = inline;
exports.listItem = listItem;
exports.block = block;
exports.inlineBlock = inlineBlock;
exports.flexBox = flexBox;
exports.inlineFlex = inlineFlex;
exports.grid = grid;
exports.inlineGrid = inlineGrid;
exports.table = table;
exports.inlineTable = inlineTable;
exports.tableRowGroup = tableRowGroup;
exports.tableHeaderGroup = tableHeaderGroup;
exports.tableFooterGroup = tableFooterGroup;
exports.tableRow = tableRow;
exports.tableColumnGroup = tableColumnGroup;
exports.tableColumn = tableColumn;
exports.tableCell = tableCell;
exports.tableCaption = tableCaption;
exports.absolute = absolute;
exports.$$static = $$static;
exports.fixed = fixed;
exports.relative = relative;
exports.sticky = sticky;
exports.hidden = hidden;
exports.dotted = dotted;
exports.dashed = dashed;
exports.solid = solid;
exports.$$double = $$double;
exports.groove = groove;
exports.ridge = ridge;
exports.inset = inset;
exports.outset = outset;
exports.thin = thin;
exports.medium = medium;
exports.thick = thick;
exports.s = s;
exports.ms = ms;
exports.linear = linear;
exports.ease = ease;
exports.easeIn = easeIn;
exports.easeOut = easeOut;
exports.easeInOut = easeInOut;
exports.stepStart = stepStart;
exports.stepEnd = stepEnd;
exports.steps = steps;
exports.cubicBezier = cubicBezier;
exports.translate = translate;
exports.translate3d = translate3d;
exports.translateX = translateX;
exports.translateY = translateY;
exports.translateZ = translateZ;
exports.scale = scale;
exports.scaleXY = scaleXY;
exports.scaleX = scaleX;
exports.scaleY = scaleY;
exports.scaleZ = scaleZ;
exports.scale3d = scale3d;
exports.rotate = rotate;
exports.rotate3d = rotate3d;
exports.rotateX = rotateX;
exports.rotateY = rotateY;
exports.rotateZ = rotateZ;
exports.skew = skew;
exports.skewX = skewX;
exports.skewY = skewY;
exports.matrix = matrix;
exports.matrix3d = matrix3d;
exports.row = row;
exports.column = column;
exports.rowReverse = rowReverse;
exports.columnReverse = columnReverse;
exports.nowrap = nowrap;
exports.wrap = wrap;
exports.wrapReverse = wrapReverse;
exports.normal = normal;
exports.flexStart = flexStart;
exports.flexEnd = flexEnd;
exports.center = center;
exports.baseline = baseline;
exports.stretch = stretch;
exports.selfStart = selfStart;
exports.selfEnd = selfEnd;
exports.spaceAround = spaceAround;
exports.spaceBetween = spaceBetween;
exports.minmax = minmax;
exports.minContent = minContent;
exports.maxContent = maxContent;
exports.fitContent = fitContent;
exports.repeat = repeat;
exports.autoFill = autoFill;
exports.autoFit = autoFit;
exports.list = list;
exports.ident = ident;
exports.nIdent = nIdent;
exports.span = span;
exports.gridStart = gridStart;
exports.gridEnd = gridEnd;
exports.firstBaseline = firstBaseline;
exports.lastBaseline = lastBaseline;
exports.spaceEvenly = spaceEvenly;
exports.areas = areas;
exports.rowDense = rowDense;
exports.columnDense = columnDense;
exports.css = css;
exports.$$global = $$global;
exports.keyframes = keyframes;
exports.fontFace = fontFace;
exports.page = page;
/* @emotion/css Not a pure module */
